/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.fake.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-10-07")
public class Worker {

  public interface Iface {

    public String getConnectionId() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException;

    public boolean setAssignmentPath(String id, String stormId, String topoId) throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException;

    public boolean setAssignment(String id, String assignment) throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException;

    public boolean ping(String id) throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException;

    public boolean sendMessage(String sessionid, String message, int taskid, String messageId) throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getConnectionId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setAssignmentPath(String id, String stormId, String topoId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setAssignment(String id, String assignment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ping(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendMessage(String sessionid, String message, int taskid, String messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getConnectionId() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException
    {
      send_getConnectionId();
      return recv_getConnectionId();
    }

    public void send_getConnectionId() throws org.apache.thrift.TException
    {
      getConnectionId_args args = new getConnectionId_args();
      sendBase("getConnectionId", args);
    }

    public String recv_getConnectionId() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException
    {
      getConnectionId_result result = new getConnectionId_result();
      receiveBase(result, "getConnectionId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aze != null) {
        throw result.aze;
      }
      if (result.foe != null) {
        throw result.foe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConnectionId failed: unknown result");
    }

    public boolean setAssignmentPath(String id, String stormId, String topoId) throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException
    {
      send_setAssignmentPath(id, stormId, topoId);
      return recv_setAssignmentPath();
    }

    public void send_setAssignmentPath(String id, String stormId, String topoId) throws org.apache.thrift.TException
    {
      setAssignmentPath_args args = new setAssignmentPath_args();
      args.setId(id);
      args.setStormId(stormId);
      args.setTopoId(topoId);
      sendBase("setAssignmentPath", args);
    }

    public boolean recv_setAssignmentPath() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException
    {
      setAssignmentPath_result result = new setAssignmentPath_result();
      receiveBase(result, "setAssignmentPath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aze != null) {
        throw result.aze;
      }
      if (result.foe != null) {
        throw result.foe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setAssignmentPath failed: unknown result");
    }

    public boolean setAssignment(String id, String assignment) throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException
    {
      send_setAssignment(id, assignment);
      return recv_setAssignment();
    }

    public void send_setAssignment(String id, String assignment) throws org.apache.thrift.TException
    {
      setAssignment_args args = new setAssignment_args();
      args.setId(id);
      args.setAssignment(assignment);
      sendBase("setAssignment", args);
    }

    public boolean recv_setAssignment() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException
    {
      setAssignment_result result = new setAssignment_result();
      receiveBase(result, "setAssignment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aze != null) {
        throw result.aze;
      }
      if (result.foe != null) {
        throw result.foe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setAssignment failed: unknown result");
    }

    public boolean ping(String id) throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException
    {
      send_ping(id);
      return recv_ping();
    }

    public void send_ping(String id) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setId(id);
      sendBase("ping", args);
    }

    public boolean recv_ping() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aze != null) {
        throw result.aze;
      }
      if (result.foe != null) {
        throw result.foe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public boolean sendMessage(String sessionid, String message, int taskid, String messageId) throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException
    {
      send_sendMessage(sessionid, message, taskid, messageId);
      return recv_sendMessage();
    }

    public void send_sendMessage(String sessionid, String message, int taskid, String messageId) throws org.apache.thrift.TException
    {
      sendMessage_args args = new sendMessage_args();
      args.setSessionid(sessionid);
      args.setMessage(message);
      args.setTaskid(taskid);
      args.setMessageId(messageId);
      sendBase("sendMessage", args);
    }

    public boolean recv_sendMessage() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException
    {
      sendMessage_result result = new sendMessage_result();
      receiveBase(result, "sendMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.aze != null) {
        throw result.aze;
      }
      if (result.foe != null) {
        throw result.foe;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendMessage failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getConnectionId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getConnectionId_call method_call = new getConnectionId_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getConnectionId_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getConnectionId_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConnectionId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getConnectionId_args args = new getConnectionId_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getConnectionId();
      }
    }

    public void setAssignmentPath(String id, String stormId, String topoId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setAssignmentPath_call method_call = new setAssignmentPath_call(id, stormId, topoId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setAssignmentPath_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String stormId;
      private String topoId;
      public setAssignmentPath_call(String id, String stormId, String topoId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.stormId = stormId;
        this.topoId = topoId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setAssignmentPath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setAssignmentPath_args args = new setAssignmentPath_args();
        args.setId(id);
        args.setStormId(stormId);
        args.setTopoId(topoId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setAssignmentPath();
      }
    }

    public void setAssignment(String id, String assignment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setAssignment_call method_call = new setAssignment_call(id, assignment, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setAssignment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private String assignment;
      public setAssignment_call(String id, String assignment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.assignment = assignment;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setAssignment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setAssignment_args args = new setAssignment_args();
        args.setId(id);
        args.setAssignment(assignment);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setAssignment();
      }
    }

    public void ping(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public ping_call(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void sendMessage(String sessionid, String message, int taskid, String messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendMessage_call method_call = new sendMessage_call(sessionid, message, taskid, messageId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionid;
      private String message;
      private int taskid;
      private String messageId;
      public sendMessage_call(String sessionid, String message, int taskid, String messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionid = sessionid;
        this.message = message;
        this.taskid = taskid;
        this.messageId = messageId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendMessage_args args = new sendMessage_args();
        args.setSessionid(sessionid);
        args.setMessage(message);
        args.setTaskid(taskid);
        args.setMessageId(messageId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.fake.storm.generated.AuthorizationException, org.apache.fake.storm.generated.FileOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendMessage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getConnectionId", new getConnectionId());
      processMap.put("setAssignmentPath", new setAssignmentPath());
      processMap.put("setAssignment", new setAssignment());
      processMap.put("ping", new ping());
      processMap.put("sendMessage", new sendMessage());
      return processMap;
    }

    public static class getConnectionId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConnectionId_args> {
      public getConnectionId() {
        super("getConnectionId");
      }

      public getConnectionId_args getEmptyArgsInstance() {
        return new getConnectionId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getConnectionId_result getResult(I iface, getConnectionId_args args) throws org.apache.thrift.TException {
        getConnectionId_result result = new getConnectionId_result();
        try {
          result.success = iface.getConnectionId();
        } catch (org.apache.fake.storm.generated.AuthorizationException aze) {
          result.aze = aze;
        } catch (org.apache.fake.storm.generated.FileOperationException foe) {
          result.foe = foe;
        }
        return result;
      }
    }

    public static class setAssignmentPath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setAssignmentPath_args> {
      public setAssignmentPath() {
        super("setAssignmentPath");
      }

      public setAssignmentPath_args getEmptyArgsInstance() {
        return new setAssignmentPath_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setAssignmentPath_result getResult(I iface, setAssignmentPath_args args) throws org.apache.thrift.TException {
        setAssignmentPath_result result = new setAssignmentPath_result();
        try {
          result.success = iface.setAssignmentPath(args.id, args.stormId, args.topoId);
          result.setSuccessIsSet(true);
        } catch (org.apache.fake.storm.generated.AuthorizationException aze) {
          result.aze = aze;
        } catch (org.apache.fake.storm.generated.FileOperationException foe) {
          result.foe = foe;
        }
        return result;
      }
    }

    public static class setAssignment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setAssignment_args> {
      public setAssignment() {
        super("setAssignment");
      }

      public setAssignment_args getEmptyArgsInstance() {
        return new setAssignment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setAssignment_result getResult(I iface, setAssignment_args args) throws org.apache.thrift.TException {
        setAssignment_result result = new setAssignment_result();
        try {
          result.success = iface.setAssignment(args.id, args.assignment);
          result.setSuccessIsSet(true);
        } catch (org.apache.fake.storm.generated.AuthorizationException aze) {
          result.aze = aze;
        } catch (org.apache.fake.storm.generated.FileOperationException foe) {
          result.foe = foe;
        }
        return result;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        try {
          result.success = iface.ping(args.id);
          result.setSuccessIsSet(true);
        } catch (org.apache.fake.storm.generated.AuthorizationException aze) {
          result.aze = aze;
        } catch (org.apache.fake.storm.generated.FileOperationException foe) {
          result.foe = foe;
        }
        return result;
      }
    }

    public static class sendMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMessage_args> {
      public sendMessage() {
        super("sendMessage");
      }

      public sendMessage_args getEmptyArgsInstance() {
        return new sendMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendMessage_result getResult(I iface, sendMessage_args args) throws org.apache.thrift.TException {
        sendMessage_result result = new sendMessage_result();
        try {
          result.success = iface.sendMessage(args.sessionid, args.message, args.taskid, args.messageId);
          result.setSuccessIsSet(true);
        } catch (org.apache.fake.storm.generated.AuthorizationException aze) {
          result.aze = aze;
        } catch (org.apache.fake.storm.generated.FileOperationException foe) {
          result.foe = foe;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getConnectionId", new getConnectionId());
      processMap.put("setAssignmentPath", new setAssignmentPath());
      processMap.put("setAssignment", new setAssignment());
      processMap.put("ping", new ping());
      processMap.put("sendMessage", new sendMessage());
      return processMap;
    }

    public static class getConnectionId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConnectionId_args, String> {
      public getConnectionId() {
        super("getConnectionId");
      }

      public getConnectionId_args getEmptyArgsInstance() {
        return new getConnectionId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getConnectionId_result result = new getConnectionId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getConnectionId_result result = new getConnectionId_result();
            if (e instanceof org.apache.fake.storm.generated.AuthorizationException) {
                        result.aze = (org.apache.fake.storm.generated.AuthorizationException) e;
                        result.setAzeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.fake.storm.generated.FileOperationException) {
                        result.foe = (org.apache.fake.storm.generated.FileOperationException) e;
                        result.setFoeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getConnectionId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getConnectionId(resultHandler);
      }
    }

    public static class setAssignmentPath<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setAssignmentPath_args, Boolean> {
      public setAssignmentPath() {
        super("setAssignmentPath");
      }

      public setAssignmentPath_args getEmptyArgsInstance() {
        return new setAssignmentPath_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setAssignmentPath_result result = new setAssignmentPath_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setAssignmentPath_result result = new setAssignmentPath_result();
            if (e instanceof org.apache.fake.storm.generated.AuthorizationException) {
                        result.aze = (org.apache.fake.storm.generated.AuthorizationException) e;
                        result.setAzeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.fake.storm.generated.FileOperationException) {
                        result.foe = (org.apache.fake.storm.generated.FileOperationException) e;
                        result.setFoeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setAssignmentPath_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setAssignmentPath(args.id, args.stormId, args.topoId,resultHandler);
      }
    }

    public static class setAssignment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setAssignment_args, Boolean> {
      public setAssignment() {
        super("setAssignment");
      }

      public setAssignment_args getEmptyArgsInstance() {
        return new setAssignment_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setAssignment_result result = new setAssignment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setAssignment_result result = new setAssignment_result();
            if (e instanceof org.apache.fake.storm.generated.AuthorizationException) {
                        result.aze = (org.apache.fake.storm.generated.AuthorizationException) e;
                        result.setAzeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.fake.storm.generated.FileOperationException) {
                        result.foe = (org.apache.fake.storm.generated.FileOperationException) e;
                        result.setFoeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setAssignment_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setAssignment(args.id, args.assignment,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Boolean> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            ping_result result = new ping_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.fake.storm.generated.AuthorizationException) {
                        result.aze = (org.apache.fake.storm.generated.AuthorizationException) e;
                        result.setAzeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.fake.storm.generated.FileOperationException) {
                        result.foe = (org.apache.fake.storm.generated.FileOperationException) e;
                        result.setFoeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.ping(args.id,resultHandler);
      }
    }

    public static class sendMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMessage_args, Boolean> {
      public sendMessage() {
        super("sendMessage");
      }

      public sendMessage_args getEmptyArgsInstance() {
        return new sendMessage_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            sendMessage_result result = new sendMessage_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendMessage_result result = new sendMessage_result();
            if (e instanceof org.apache.fake.storm.generated.AuthorizationException) {
                        result.aze = (org.apache.fake.storm.generated.AuthorizationException) e;
                        result.setAzeIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.fake.storm.generated.FileOperationException) {
                        result.foe = (org.apache.fake.storm.generated.FileOperationException) e;
                        result.setFoeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.sendMessage(args.sessionid, args.message, args.taskid, args.messageId,resultHandler);
      }
    }

  }

  public static class getConnectionId_args implements org.apache.thrift.TBase<getConnectionId_args, getConnectionId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConnectionId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConnectionId_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConnectionId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConnectionId_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConnectionId_args.class, metaDataMap);
    }

    public getConnectionId_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConnectionId_args(getConnectionId_args other) {
    }

    public getConnectionId_args deepCopy() {
      return new getConnectionId_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConnectionId_args)
        return this.equals((getConnectionId_args)that);
      return false;
    }

    public boolean equals(getConnectionId_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getConnectionId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConnectionId_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConnectionId_argsStandardSchemeFactory implements SchemeFactory {
      public getConnectionId_argsStandardScheme getScheme() {
        return new getConnectionId_argsStandardScheme();
      }
    }

    private static class getConnectionId_argsStandardScheme extends StandardScheme<getConnectionId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConnectionId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConnectionId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConnectionId_argsTupleSchemeFactory implements SchemeFactory {
      public getConnectionId_argsTupleScheme getScheme() {
        return new getConnectionId_argsTupleScheme();
      }
    }

    private static class getConnectionId_argsTupleScheme extends TupleScheme<getConnectionId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConnectionId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConnectionId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getConnectionId_result implements org.apache.thrift.TBase<getConnectionId_result, getConnectionId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConnectionId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConnectionId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField AZE_FIELD_DESC = new org.apache.thrift.protocol.TField("aze", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FOE_FIELD_DESC = new org.apache.thrift.protocol.TField("foe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getConnectionId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getConnectionId_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.fake.storm.generated.AuthorizationException aze; // required
    public org.apache.fake.storm.generated.FileOperationException foe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AZE((short)1, "aze"),
      FOE((short)2, "foe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AZE
            return AZE;
          case 2: // FOE
            return FOE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AZE, new org.apache.thrift.meta_data.FieldMetaData("aze", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FOE, new org.apache.thrift.meta_data.FieldMetaData("foe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConnectionId_result.class, metaDataMap);
    }

    public getConnectionId_result() {
    }

    public getConnectionId_result(
      String success,
      org.apache.fake.storm.generated.AuthorizationException aze,
      org.apache.fake.storm.generated.FileOperationException foe)
    {
      this();
      this.success = success;
      this.aze = aze;
      this.foe = foe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getConnectionId_result(getConnectionId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetAze()) {
        this.aze = new org.apache.fake.storm.generated.AuthorizationException(other.aze);
      }
      if (other.isSetFoe()) {
        this.foe = new org.apache.fake.storm.generated.FileOperationException(other.foe);
      }
    }

    public getConnectionId_result deepCopy() {
      return new getConnectionId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.aze = null;
      this.foe = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getConnectionId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.fake.storm.generated.AuthorizationException getAze() {
      return this.aze;
    }

    public getConnectionId_result setAze(org.apache.fake.storm.generated.AuthorizationException aze) {
      this.aze = aze;
      return this;
    }

    public void unsetAze() {
      this.aze = null;
    }

    /** Returns true if field aze is set (has been assigned a value) and false otherwise */
    public boolean isSetAze() {
      return this.aze != null;
    }

    public void setAzeIsSet(boolean value) {
      if (!value) {
        this.aze = null;
      }
    }

    public org.apache.fake.storm.generated.FileOperationException getFoe() {
      return this.foe;
    }

    public getConnectionId_result setFoe(org.apache.fake.storm.generated.FileOperationException foe) {
      this.foe = foe;
      return this;
    }

    public void unsetFoe() {
      this.foe = null;
    }

    /** Returns true if field foe is set (has been assigned a value) and false otherwise */
    public boolean isSetFoe() {
      return this.foe != null;
    }

    public void setFoeIsSet(boolean value) {
      if (!value) {
        this.foe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case AZE:
        if (value == null) {
          unsetAze();
        } else {
          setAze((org.apache.fake.storm.generated.AuthorizationException)value);
        }
        break;

      case FOE:
        if (value == null) {
          unsetFoe();
        } else {
          setFoe((org.apache.fake.storm.generated.FileOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case AZE:
        return getAze();

      case FOE:
        return getFoe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AZE:
        return isSetAze();
      case FOE:
        return isSetFoe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getConnectionId_result)
        return this.equals((getConnectionId_result)that);
      return false;
    }

    public boolean equals(getConnectionId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_aze = true && this.isSetAze();
      boolean that_present_aze = true && that.isSetAze();
      if (this_present_aze || that_present_aze) {
        if (!(this_present_aze && that_present_aze))
          return false;
        if (!this.aze.equals(that.aze))
          return false;
      }

      boolean this_present_foe = true && this.isSetFoe();
      boolean that_present_foe = true && that.isSetFoe();
      if (this_present_foe || that_present_foe) {
        if (!(this_present_foe && that_present_foe))
          return false;
        if (!this.foe.equals(that.foe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_aze = true && (isSetAze());
      list.add(present_aze);
      if (present_aze)
        list.add(aze);

      boolean present_foe = true && (isSetFoe());
      list.add(present_foe);
      if (present_foe)
        list.add(foe);

      return list.hashCode();
    }

    @Override
    public int compareTo(getConnectionId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAze()).compareTo(other.isSetAze());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAze()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aze, other.aze);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoe()).compareTo(other.isSetFoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foe, other.foe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getConnectionId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aze:");
      if (this.aze == null) {
        sb.append("null");
      } else {
        sb.append(this.aze);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foe:");
      if (this.foe == null) {
        sb.append("null");
      } else {
        sb.append(this.foe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getConnectionId_resultStandardSchemeFactory implements SchemeFactory {
      public getConnectionId_resultStandardScheme getScheme() {
        return new getConnectionId_resultStandardScheme();
      }
    }

    private static class getConnectionId_resultStandardScheme extends StandardScheme<getConnectionId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getConnectionId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AZE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aze = new org.apache.fake.storm.generated.AuthorizationException();
                struct.aze.read(iprot);
                struct.setAzeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foe = new org.apache.fake.storm.generated.FileOperationException();
                struct.foe.read(iprot);
                struct.setFoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getConnectionId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aze != null) {
          oprot.writeFieldBegin(AZE_FIELD_DESC);
          struct.aze.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.foe != null) {
          oprot.writeFieldBegin(FOE_FIELD_DESC);
          struct.foe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getConnectionId_resultTupleSchemeFactory implements SchemeFactory {
      public getConnectionId_resultTupleScheme getScheme() {
        return new getConnectionId_resultTupleScheme();
      }
    }

    private static class getConnectionId_resultTupleScheme extends TupleScheme<getConnectionId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getConnectionId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAze()) {
          optionals.set(1);
        }
        if (struct.isSetFoe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetAze()) {
          struct.aze.write(oprot);
        }
        if (struct.isSetFoe()) {
          struct.foe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getConnectionId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aze = new org.apache.fake.storm.generated.AuthorizationException();
          struct.aze.read(iprot);
          struct.setAzeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.foe = new org.apache.fake.storm.generated.FileOperationException();
          struct.foe.read(iprot);
          struct.setFoeIsSet(true);
        }
      }
    }

  }

  public static class setAssignmentPath_args implements org.apache.thrift.TBase<setAssignmentPath_args, setAssignmentPath_args._Fields>, java.io.Serializable, Cloneable, Comparable<setAssignmentPath_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAssignmentPath_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STORM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stormId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOPO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topoId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setAssignmentPath_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setAssignmentPath_argsTupleSchemeFactory());
    }

    public String id; // required
    public String stormId; // required
    public String topoId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      STORM_ID((short)2, "stormId"),
      TOPO_ID((short)3, "topoId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // STORM_ID
            return STORM_ID;
          case 3: // TOPO_ID
            return TOPO_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STORM_ID, new org.apache.thrift.meta_data.FieldMetaData("stormId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOPO_ID, new org.apache.thrift.meta_data.FieldMetaData("topoId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAssignmentPath_args.class, metaDataMap);
    }

    public setAssignmentPath_args() {
    }

    public setAssignmentPath_args(
      String id,
      String stormId,
      String topoId)
    {
      this();
      this.id = id;
      this.stormId = stormId;
      this.topoId = topoId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAssignmentPath_args(setAssignmentPath_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetStormId()) {
        this.stormId = other.stormId;
      }
      if (other.isSetTopoId()) {
        this.topoId = other.topoId;
      }
    }

    public setAssignmentPath_args deepCopy() {
      return new setAssignmentPath_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.stormId = null;
      this.topoId = null;
    }

    public String getId() {
      return this.id;
    }

    public setAssignmentPath_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getStormId() {
      return this.stormId;
    }

    public setAssignmentPath_args setStormId(String stormId) {
      this.stormId = stormId;
      return this;
    }

    public void unsetStormId() {
      this.stormId = null;
    }

    /** Returns true if field stormId is set (has been assigned a value) and false otherwise */
    public boolean isSetStormId() {
      return this.stormId != null;
    }

    public void setStormIdIsSet(boolean value) {
      if (!value) {
        this.stormId = null;
      }
    }

    public String getTopoId() {
      return this.topoId;
    }

    public setAssignmentPath_args setTopoId(String topoId) {
      this.topoId = topoId;
      return this;
    }

    public void unsetTopoId() {
      this.topoId = null;
    }

    /** Returns true if field topoId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopoId() {
      return this.topoId != null;
    }

    public void setTopoIdIsSet(boolean value) {
      if (!value) {
        this.topoId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case STORM_ID:
        if (value == null) {
          unsetStormId();
        } else {
          setStormId((String)value);
        }
        break;

      case TOPO_ID:
        if (value == null) {
          unsetTopoId();
        } else {
          setTopoId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case STORM_ID:
        return getStormId();

      case TOPO_ID:
        return getTopoId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case STORM_ID:
        return isSetStormId();
      case TOPO_ID:
        return isSetTopoId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setAssignmentPath_args)
        return this.equals((setAssignmentPath_args)that);
      return false;
    }

    public boolean equals(setAssignmentPath_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_stormId = true && this.isSetStormId();
      boolean that_present_stormId = true && that.isSetStormId();
      if (this_present_stormId || that_present_stormId) {
        if (!(this_present_stormId && that_present_stormId))
          return false;
        if (!this.stormId.equals(that.stormId))
          return false;
      }

      boolean this_present_topoId = true && this.isSetTopoId();
      boolean that_present_topoId = true && that.isSetTopoId();
      if (this_present_topoId || that_present_topoId) {
        if (!(this_present_topoId && that_present_topoId))
          return false;
        if (!this.topoId.equals(that.topoId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_stormId = true && (isSetStormId());
      list.add(present_stormId);
      if (present_stormId)
        list.add(stormId);

      boolean present_topoId = true && (isSetTopoId());
      list.add(present_topoId);
      if (present_topoId)
        list.add(topoId);

      return list.hashCode();
    }

    @Override
    public int compareTo(setAssignmentPath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStormId()).compareTo(other.isSetStormId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStormId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stormId, other.stormId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopoId()).compareTo(other.isSetTopoId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopoId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topoId, other.topoId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setAssignmentPath_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stormId:");
      if (this.stormId == null) {
        sb.append("null");
      } else {
        sb.append(this.stormId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topoId:");
      if (this.topoId == null) {
        sb.append("null");
      } else {
        sb.append(this.topoId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAssignmentPath_argsStandardSchemeFactory implements SchemeFactory {
      public setAssignmentPath_argsStandardScheme getScheme() {
        return new setAssignmentPath_argsStandardScheme();
      }
    }

    private static class setAssignmentPath_argsStandardScheme extends StandardScheme<setAssignmentPath_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAssignmentPath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STORM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stormId = iprot.readString();
                struct.setStormIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOPO_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topoId = iprot.readString();
                struct.setTopoIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAssignmentPath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.stormId != null) {
          oprot.writeFieldBegin(STORM_ID_FIELD_DESC);
          oprot.writeString(struct.stormId);
          oprot.writeFieldEnd();
        }
        if (struct.topoId != null) {
          oprot.writeFieldBegin(TOPO_ID_FIELD_DESC);
          oprot.writeString(struct.topoId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAssignmentPath_argsTupleSchemeFactory implements SchemeFactory {
      public setAssignmentPath_argsTupleScheme getScheme() {
        return new setAssignmentPath_argsTupleScheme();
      }
    }

    private static class setAssignmentPath_argsTupleScheme extends TupleScheme<setAssignmentPath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAssignmentPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetStormId()) {
          optionals.set(1);
        }
        if (struct.isSetTopoId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetStormId()) {
          oprot.writeString(struct.stormId);
        }
        if (struct.isSetTopoId()) {
          oprot.writeString(struct.topoId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAssignmentPath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stormId = iprot.readString();
          struct.setStormIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.topoId = iprot.readString();
          struct.setTopoIdIsSet(true);
        }
      }
    }

  }

  public static class setAssignmentPath_result implements org.apache.thrift.TBase<setAssignmentPath_result, setAssignmentPath_result._Fields>, java.io.Serializable, Cloneable, Comparable<setAssignmentPath_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAssignmentPath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AZE_FIELD_DESC = new org.apache.thrift.protocol.TField("aze", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FOE_FIELD_DESC = new org.apache.thrift.protocol.TField("foe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setAssignmentPath_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setAssignmentPath_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.fake.storm.generated.AuthorizationException aze; // required
    public org.apache.fake.storm.generated.FileOperationException foe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AZE((short)1, "aze"),
      FOE((short)2, "foe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AZE
            return AZE;
          case 2: // FOE
            return FOE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AZE, new org.apache.thrift.meta_data.FieldMetaData("aze", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FOE, new org.apache.thrift.meta_data.FieldMetaData("foe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAssignmentPath_result.class, metaDataMap);
    }

    public setAssignmentPath_result() {
    }

    public setAssignmentPath_result(
      boolean success,
      org.apache.fake.storm.generated.AuthorizationException aze,
      org.apache.fake.storm.generated.FileOperationException foe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aze = aze;
      this.foe = foe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAssignmentPath_result(setAssignmentPath_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAze()) {
        this.aze = new org.apache.fake.storm.generated.AuthorizationException(other.aze);
      }
      if (other.isSetFoe()) {
        this.foe = new org.apache.fake.storm.generated.FileOperationException(other.foe);
      }
    }

    public setAssignmentPath_result deepCopy() {
      return new setAssignmentPath_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aze = null;
      this.foe = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setAssignmentPath_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.fake.storm.generated.AuthorizationException getAze() {
      return this.aze;
    }

    public setAssignmentPath_result setAze(org.apache.fake.storm.generated.AuthorizationException aze) {
      this.aze = aze;
      return this;
    }

    public void unsetAze() {
      this.aze = null;
    }

    /** Returns true if field aze is set (has been assigned a value) and false otherwise */
    public boolean isSetAze() {
      return this.aze != null;
    }

    public void setAzeIsSet(boolean value) {
      if (!value) {
        this.aze = null;
      }
    }

    public org.apache.fake.storm.generated.FileOperationException getFoe() {
      return this.foe;
    }

    public setAssignmentPath_result setFoe(org.apache.fake.storm.generated.FileOperationException foe) {
      this.foe = foe;
      return this;
    }

    public void unsetFoe() {
      this.foe = null;
    }

    /** Returns true if field foe is set (has been assigned a value) and false otherwise */
    public boolean isSetFoe() {
      return this.foe != null;
    }

    public void setFoeIsSet(boolean value) {
      if (!value) {
        this.foe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AZE:
        if (value == null) {
          unsetAze();
        } else {
          setAze((org.apache.fake.storm.generated.AuthorizationException)value);
        }
        break;

      case FOE:
        if (value == null) {
          unsetFoe();
        } else {
          setFoe((org.apache.fake.storm.generated.FileOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AZE:
        return getAze();

      case FOE:
        return getFoe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AZE:
        return isSetAze();
      case FOE:
        return isSetFoe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setAssignmentPath_result)
        return this.equals((setAssignmentPath_result)that);
      return false;
    }

    public boolean equals(setAssignmentPath_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aze = true && this.isSetAze();
      boolean that_present_aze = true && that.isSetAze();
      if (this_present_aze || that_present_aze) {
        if (!(this_present_aze && that_present_aze))
          return false;
        if (!this.aze.equals(that.aze))
          return false;
      }

      boolean this_present_foe = true && this.isSetFoe();
      boolean that_present_foe = true && that.isSetFoe();
      if (this_present_foe || that_present_foe) {
        if (!(this_present_foe && that_present_foe))
          return false;
        if (!this.foe.equals(that.foe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_aze = true && (isSetAze());
      list.add(present_aze);
      if (present_aze)
        list.add(aze);

      boolean present_foe = true && (isSetFoe());
      list.add(present_foe);
      if (present_foe)
        list.add(foe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setAssignmentPath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAze()).compareTo(other.isSetAze());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAze()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aze, other.aze);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoe()).compareTo(other.isSetFoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foe, other.foe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setAssignmentPath_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aze:");
      if (this.aze == null) {
        sb.append("null");
      } else {
        sb.append(this.aze);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foe:");
      if (this.foe == null) {
        sb.append("null");
      } else {
        sb.append(this.foe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAssignmentPath_resultStandardSchemeFactory implements SchemeFactory {
      public setAssignmentPath_resultStandardScheme getScheme() {
        return new setAssignmentPath_resultStandardScheme();
      }
    }

    private static class setAssignmentPath_resultStandardScheme extends StandardScheme<setAssignmentPath_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAssignmentPath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AZE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aze = new org.apache.fake.storm.generated.AuthorizationException();
                struct.aze.read(iprot);
                struct.setAzeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foe = new org.apache.fake.storm.generated.FileOperationException();
                struct.foe.read(iprot);
                struct.setFoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAssignmentPath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aze != null) {
          oprot.writeFieldBegin(AZE_FIELD_DESC);
          struct.aze.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.foe != null) {
          oprot.writeFieldBegin(FOE_FIELD_DESC);
          struct.foe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAssignmentPath_resultTupleSchemeFactory implements SchemeFactory {
      public setAssignmentPath_resultTupleScheme getScheme() {
        return new setAssignmentPath_resultTupleScheme();
      }
    }

    private static class setAssignmentPath_resultTupleScheme extends TupleScheme<setAssignmentPath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAssignmentPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAze()) {
          optionals.set(1);
        }
        if (struct.isSetFoe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAze()) {
          struct.aze.write(oprot);
        }
        if (struct.isSetFoe()) {
          struct.foe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAssignmentPath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aze = new org.apache.fake.storm.generated.AuthorizationException();
          struct.aze.read(iprot);
          struct.setAzeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.foe = new org.apache.fake.storm.generated.FileOperationException();
          struct.foe.read(iprot);
          struct.setFoeIsSet(true);
        }
      }
    }

  }

  public static class setAssignment_args implements org.apache.thrift.TBase<setAssignment_args, setAssignment_args._Fields>, java.io.Serializable, Cloneable, Comparable<setAssignment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAssignment_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ASSIGNMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("assignment", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setAssignment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setAssignment_argsTupleSchemeFactory());
    }

    public String id; // required
    public String assignment; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      ASSIGNMENT((short)2, "assignment");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // ASSIGNMENT
            return ASSIGNMENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ASSIGNMENT, new org.apache.thrift.meta_data.FieldMetaData("assignment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAssignment_args.class, metaDataMap);
    }

    public setAssignment_args() {
    }

    public setAssignment_args(
      String id,
      String assignment)
    {
      this();
      this.id = id;
      this.assignment = assignment;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAssignment_args(setAssignment_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetAssignment()) {
        this.assignment = other.assignment;
      }
    }

    public setAssignment_args deepCopy() {
      return new setAssignment_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.assignment = null;
    }

    public String getId() {
      return this.id;
    }

    public setAssignment_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getAssignment() {
      return this.assignment;
    }

    public setAssignment_args setAssignment(String assignment) {
      this.assignment = assignment;
      return this;
    }

    public void unsetAssignment() {
      this.assignment = null;
    }

    /** Returns true if field assignment is set (has been assigned a value) and false otherwise */
    public boolean isSetAssignment() {
      return this.assignment != null;
    }

    public void setAssignmentIsSet(boolean value) {
      if (!value) {
        this.assignment = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case ASSIGNMENT:
        if (value == null) {
          unsetAssignment();
        } else {
          setAssignment((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case ASSIGNMENT:
        return getAssignment();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case ASSIGNMENT:
        return isSetAssignment();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setAssignment_args)
        return this.equals((setAssignment_args)that);
      return false;
    }

    public boolean equals(setAssignment_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_assignment = true && this.isSetAssignment();
      boolean that_present_assignment = true && that.isSetAssignment();
      if (this_present_assignment || that_present_assignment) {
        if (!(this_present_assignment && that_present_assignment))
          return false;
        if (!this.assignment.equals(that.assignment))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_assignment = true && (isSetAssignment());
      list.add(present_assignment);
      if (present_assignment)
        list.add(assignment);

      return list.hashCode();
    }

    @Override
    public int compareTo(setAssignment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAssignment()).compareTo(other.isSetAssignment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssignment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignment, other.assignment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setAssignment_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("assignment:");
      if (this.assignment == null) {
        sb.append("null");
      } else {
        sb.append(this.assignment);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAssignment_argsStandardSchemeFactory implements SchemeFactory {
      public setAssignment_argsStandardScheme getScheme() {
        return new setAssignment_argsStandardScheme();
      }
    }

    private static class setAssignment_argsStandardScheme extends StandardScheme<setAssignment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAssignment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ASSIGNMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.assignment = iprot.readString();
                struct.setAssignmentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAssignment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.assignment != null) {
          oprot.writeFieldBegin(ASSIGNMENT_FIELD_DESC);
          oprot.writeString(struct.assignment);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAssignment_argsTupleSchemeFactory implements SchemeFactory {
      public setAssignment_argsTupleScheme getScheme() {
        return new setAssignment_argsTupleScheme();
      }
    }

    private static class setAssignment_argsTupleScheme extends TupleScheme<setAssignment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAssignment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetAssignment()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetAssignment()) {
          oprot.writeString(struct.assignment);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAssignment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.assignment = iprot.readString();
          struct.setAssignmentIsSet(true);
        }
      }
    }

  }

  public static class setAssignment_result implements org.apache.thrift.TBase<setAssignment_result, setAssignment_result._Fields>, java.io.Serializable, Cloneable, Comparable<setAssignment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAssignment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AZE_FIELD_DESC = new org.apache.thrift.protocol.TField("aze", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FOE_FIELD_DESC = new org.apache.thrift.protocol.TField("foe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setAssignment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setAssignment_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.fake.storm.generated.AuthorizationException aze; // required
    public org.apache.fake.storm.generated.FileOperationException foe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AZE((short)1, "aze"),
      FOE((short)2, "foe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AZE
            return AZE;
          case 2: // FOE
            return FOE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AZE, new org.apache.thrift.meta_data.FieldMetaData("aze", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FOE, new org.apache.thrift.meta_data.FieldMetaData("foe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAssignment_result.class, metaDataMap);
    }

    public setAssignment_result() {
    }

    public setAssignment_result(
      boolean success,
      org.apache.fake.storm.generated.AuthorizationException aze,
      org.apache.fake.storm.generated.FileOperationException foe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aze = aze;
      this.foe = foe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAssignment_result(setAssignment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAze()) {
        this.aze = new org.apache.fake.storm.generated.AuthorizationException(other.aze);
      }
      if (other.isSetFoe()) {
        this.foe = new org.apache.fake.storm.generated.FileOperationException(other.foe);
      }
    }

    public setAssignment_result deepCopy() {
      return new setAssignment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aze = null;
      this.foe = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setAssignment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.fake.storm.generated.AuthorizationException getAze() {
      return this.aze;
    }

    public setAssignment_result setAze(org.apache.fake.storm.generated.AuthorizationException aze) {
      this.aze = aze;
      return this;
    }

    public void unsetAze() {
      this.aze = null;
    }

    /** Returns true if field aze is set (has been assigned a value) and false otherwise */
    public boolean isSetAze() {
      return this.aze != null;
    }

    public void setAzeIsSet(boolean value) {
      if (!value) {
        this.aze = null;
      }
    }

    public org.apache.fake.storm.generated.FileOperationException getFoe() {
      return this.foe;
    }

    public setAssignment_result setFoe(org.apache.fake.storm.generated.FileOperationException foe) {
      this.foe = foe;
      return this;
    }

    public void unsetFoe() {
      this.foe = null;
    }

    /** Returns true if field foe is set (has been assigned a value) and false otherwise */
    public boolean isSetFoe() {
      return this.foe != null;
    }

    public void setFoeIsSet(boolean value) {
      if (!value) {
        this.foe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AZE:
        if (value == null) {
          unsetAze();
        } else {
          setAze((org.apache.fake.storm.generated.AuthorizationException)value);
        }
        break;

      case FOE:
        if (value == null) {
          unsetFoe();
        } else {
          setFoe((org.apache.fake.storm.generated.FileOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AZE:
        return getAze();

      case FOE:
        return getFoe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AZE:
        return isSetAze();
      case FOE:
        return isSetFoe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setAssignment_result)
        return this.equals((setAssignment_result)that);
      return false;
    }

    public boolean equals(setAssignment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aze = true && this.isSetAze();
      boolean that_present_aze = true && that.isSetAze();
      if (this_present_aze || that_present_aze) {
        if (!(this_present_aze && that_present_aze))
          return false;
        if (!this.aze.equals(that.aze))
          return false;
      }

      boolean this_present_foe = true && this.isSetFoe();
      boolean that_present_foe = true && that.isSetFoe();
      if (this_present_foe || that_present_foe) {
        if (!(this_present_foe && that_present_foe))
          return false;
        if (!this.foe.equals(that.foe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_aze = true && (isSetAze());
      list.add(present_aze);
      if (present_aze)
        list.add(aze);

      boolean present_foe = true && (isSetFoe());
      list.add(present_foe);
      if (present_foe)
        list.add(foe);

      return list.hashCode();
    }

    @Override
    public int compareTo(setAssignment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAze()).compareTo(other.isSetAze());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAze()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aze, other.aze);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoe()).compareTo(other.isSetFoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foe, other.foe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setAssignment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aze:");
      if (this.aze == null) {
        sb.append("null");
      } else {
        sb.append(this.aze);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foe:");
      if (this.foe == null) {
        sb.append("null");
      } else {
        sb.append(this.foe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAssignment_resultStandardSchemeFactory implements SchemeFactory {
      public setAssignment_resultStandardScheme getScheme() {
        return new setAssignment_resultStandardScheme();
      }
    }

    private static class setAssignment_resultStandardScheme extends StandardScheme<setAssignment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAssignment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AZE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aze = new org.apache.fake.storm.generated.AuthorizationException();
                struct.aze.read(iprot);
                struct.setAzeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foe = new org.apache.fake.storm.generated.FileOperationException();
                struct.foe.read(iprot);
                struct.setFoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAssignment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aze != null) {
          oprot.writeFieldBegin(AZE_FIELD_DESC);
          struct.aze.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.foe != null) {
          oprot.writeFieldBegin(FOE_FIELD_DESC);
          struct.foe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAssignment_resultTupleSchemeFactory implements SchemeFactory {
      public setAssignment_resultTupleScheme getScheme() {
        return new setAssignment_resultTupleScheme();
      }
    }

    private static class setAssignment_resultTupleScheme extends TupleScheme<setAssignment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAssignment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAze()) {
          optionals.set(1);
        }
        if (struct.isSetFoe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAze()) {
          struct.aze.write(oprot);
        }
        if (struct.isSetFoe()) {
          struct.foe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAssignment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aze = new org.apache.fake.storm.generated.AuthorizationException();
          struct.aze.read(iprot);
          struct.setAzeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.foe = new org.apache.fake.storm.generated.FileOperationException();
          struct.foe.read(iprot);
          struct.setFoeIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public ping_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AZE_FIELD_DESC = new org.apache.thrift.protocol.TField("aze", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FOE_FIELD_DESC = new org.apache.thrift.protocol.TField("foe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.fake.storm.generated.AuthorizationException aze; // required
    public org.apache.fake.storm.generated.FileOperationException foe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AZE((short)1, "aze"),
      FOE((short)2, "foe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AZE
            return AZE;
          case 2: // FOE
            return FOE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AZE, new org.apache.thrift.meta_data.FieldMetaData("aze", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FOE, new org.apache.thrift.meta_data.FieldMetaData("foe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      boolean success,
      org.apache.fake.storm.generated.AuthorizationException aze,
      org.apache.fake.storm.generated.FileOperationException foe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aze = aze;
      this.foe = foe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAze()) {
        this.aze = new org.apache.fake.storm.generated.AuthorizationException(other.aze);
      }
      if (other.isSetFoe()) {
        this.foe = new org.apache.fake.storm.generated.FileOperationException(other.foe);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aze = null;
      this.foe = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ping_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.fake.storm.generated.AuthorizationException getAze() {
      return this.aze;
    }

    public ping_result setAze(org.apache.fake.storm.generated.AuthorizationException aze) {
      this.aze = aze;
      return this;
    }

    public void unsetAze() {
      this.aze = null;
    }

    /** Returns true if field aze is set (has been assigned a value) and false otherwise */
    public boolean isSetAze() {
      return this.aze != null;
    }

    public void setAzeIsSet(boolean value) {
      if (!value) {
        this.aze = null;
      }
    }

    public org.apache.fake.storm.generated.FileOperationException getFoe() {
      return this.foe;
    }

    public ping_result setFoe(org.apache.fake.storm.generated.FileOperationException foe) {
      this.foe = foe;
      return this;
    }

    public void unsetFoe() {
      this.foe = null;
    }

    /** Returns true if field foe is set (has been assigned a value) and false otherwise */
    public boolean isSetFoe() {
      return this.foe != null;
    }

    public void setFoeIsSet(boolean value) {
      if (!value) {
        this.foe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AZE:
        if (value == null) {
          unsetAze();
        } else {
          setAze((org.apache.fake.storm.generated.AuthorizationException)value);
        }
        break;

      case FOE:
        if (value == null) {
          unsetFoe();
        } else {
          setFoe((org.apache.fake.storm.generated.FileOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AZE:
        return getAze();

      case FOE:
        return getFoe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AZE:
        return isSetAze();
      case FOE:
        return isSetFoe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aze = true && this.isSetAze();
      boolean that_present_aze = true && that.isSetAze();
      if (this_present_aze || that_present_aze) {
        if (!(this_present_aze && that_present_aze))
          return false;
        if (!this.aze.equals(that.aze))
          return false;
      }

      boolean this_present_foe = true && this.isSetFoe();
      boolean that_present_foe = true && that.isSetFoe();
      if (this_present_foe || that_present_foe) {
        if (!(this_present_foe && that_present_foe))
          return false;
        if (!this.foe.equals(that.foe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_aze = true && (isSetAze());
      list.add(present_aze);
      if (present_aze)
        list.add(aze);

      boolean present_foe = true && (isSetFoe());
      list.add(present_foe);
      if (present_foe)
        list.add(foe);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAze()).compareTo(other.isSetAze());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAze()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aze, other.aze);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoe()).compareTo(other.isSetFoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foe, other.foe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aze:");
      if (this.aze == null) {
        sb.append("null");
      } else {
        sb.append(this.aze);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foe:");
      if (this.foe == null) {
        sb.append("null");
      } else {
        sb.append(this.foe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AZE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aze = new org.apache.fake.storm.generated.AuthorizationException();
                struct.aze.read(iprot);
                struct.setAzeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foe = new org.apache.fake.storm.generated.FileOperationException();
                struct.foe.read(iprot);
                struct.setFoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aze != null) {
          oprot.writeFieldBegin(AZE_FIELD_DESC);
          struct.aze.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.foe != null) {
          oprot.writeFieldBegin(FOE_FIELD_DESC);
          struct.foe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAze()) {
          optionals.set(1);
        }
        if (struct.isSetFoe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAze()) {
          struct.aze.write(oprot);
        }
        if (struct.isSetFoe()) {
          struct.foe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aze = new org.apache.fake.storm.generated.AuthorizationException();
          struct.aze.read(iprot);
          struct.setAzeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.foe = new org.apache.fake.storm.generated.FileOperationException();
          struct.foe.read(iprot);
          struct.setFoeIsSet(true);
        }
      }
    }

  }

  public static class sendMessage_args implements org.apache.thrift.TBase<sendMessage_args, sendMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessage_args");

    private static final org.apache.thrift.protocol.TField SESSIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TASKID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskid", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMessage_argsTupleSchemeFactory());
    }

    public String sessionid; // required
    public String message; // required
    public int taskid; // required
    public String messageId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSIONID((short)1, "sessionid"),
      MESSAGE((short)2, "message"),
      TASKID((short)3, "taskid"),
      MESSAGE_ID((short)4, "messageId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSIONID
            return SESSIONID;
          case 2: // MESSAGE
            return MESSAGE;
          case 3: // TASKID
            return TASKID;
          case 4: // MESSAGE_ID
            return MESSAGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TASKID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSIONID, new org.apache.thrift.meta_data.FieldMetaData("sessionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TASKID, new org.apache.thrift.meta_data.FieldMetaData("taskid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessage_args.class, metaDataMap);
    }

    public sendMessage_args() {
    }

    public sendMessage_args(
      String sessionid,
      String message,
      int taskid,
      String messageId)
    {
      this();
      this.sessionid = sessionid;
      this.message = message;
      this.taskid = taskid;
      setTaskidIsSet(true);
      this.messageId = messageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessage_args(sendMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSessionid()) {
        this.sessionid = other.sessionid;
      }
      if (other.isSetMessage()) {
        this.message = other.message;
      }
      this.taskid = other.taskid;
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
    }

    public sendMessage_args deepCopy() {
      return new sendMessage_args(this);
    }

    @Override
    public void clear() {
      this.sessionid = null;
      this.message = null;
      setTaskidIsSet(false);
      this.taskid = 0;
      this.messageId = null;
    }

    public String getSessionid() {
      return this.sessionid;
    }

    public sendMessage_args setSessionid(String sessionid) {
      this.sessionid = sessionid;
      return this;
    }

    public void unsetSessionid() {
      this.sessionid = null;
    }

    /** Returns true if field sessionid is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionid() {
      return this.sessionid != null;
    }

    public void setSessionidIsSet(boolean value) {
      if (!value) {
        this.sessionid = null;
      }
    }

    public String getMessage() {
      return this.message;
    }

    public sendMessage_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public int getTaskid() {
      return this.taskid;
    }

    public sendMessage_args setTaskid(int taskid) {
      this.taskid = taskid;
      setTaskidIsSet(true);
      return this;
    }

    public void unsetTaskid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    /** Returns true if field taskid is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskid() {
      return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
    }

    public void setTaskidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
    }

    public String getMessageId() {
      return this.messageId;
    }

    public sendMessage_args setMessageId(String messageId) {
      this.messageId = messageId;
      return this;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSIONID:
        if (value == null) {
          unsetSessionid();
        } else {
          setSessionid((String)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      case TASKID:
        if (value == null) {
          unsetTaskid();
        } else {
          setTaskid((Integer)value);
        }
        break;

      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSIONID:
        return getSessionid();

      case MESSAGE:
        return getMessage();

      case TASKID:
        return getTaskid();

      case MESSAGE_ID:
        return getMessageId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSIONID:
        return isSetSessionid();
      case MESSAGE:
        return isSetMessage();
      case TASKID:
        return isSetTaskid();
      case MESSAGE_ID:
        return isSetMessageId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessage_args)
        return this.equals((sendMessage_args)that);
      return false;
    }

    public boolean equals(sendMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionid = true && this.isSetSessionid();
      boolean that_present_sessionid = true && that.isSetSessionid();
      if (this_present_sessionid || that_present_sessionid) {
        if (!(this_present_sessionid && that_present_sessionid))
          return false;
        if (!this.sessionid.equals(that.sessionid))
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_taskid = true;
      boolean that_present_taskid = true;
      if (this_present_taskid || that_present_taskid) {
        if (!(this_present_taskid && that_present_taskid))
          return false;
        if (this.taskid != that.taskid)
          return false;
      }

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionid = true && (isSetSessionid());
      list.add(present_sessionid);
      if (present_sessionid)
        list.add(sessionid);

      boolean present_message = true && (isSetMessage());
      list.add(present_message);
      if (present_message)
        list.add(message);

      boolean present_taskid = true;
      list.add(present_taskid);
      if (present_taskid)
        list.add(taskid);

      boolean present_messageId = true && (isSetMessageId());
      list.add(present_messageId);
      if (present_messageId)
        list.add(messageId);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionid()).compareTo(other.isSetSessionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionid, other.sessionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskid()).compareTo(other.isSetTaskid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskid, other.taskid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMessage_args(");
      boolean first = true;

      sb.append("sessionid:");
      if (this.sessionid == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskid:");
      sb.append(this.taskid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMessage_argsStandardSchemeFactory implements SchemeFactory {
      public sendMessage_argsStandardScheme getScheme() {
        return new sendMessage_argsStandardScheme();
      }
    }

    private static class sendMessage_argsStandardScheme extends StandardScheme<sendMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSIONID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionid = iprot.readString();
                struct.setSessionidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TASKID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskid = iprot.readI32();
                struct.setTaskidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageId = iprot.readString();
                struct.setMessageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionid != null) {
          oprot.writeFieldBegin(SESSIONID_FIELD_DESC);
          oprot.writeString(struct.sessionid);
          oprot.writeFieldEnd();
        }
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TASKID_FIELD_DESC);
        oprot.writeI32(struct.taskid);
        oprot.writeFieldEnd();
        if (struct.messageId != null) {
          oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
          oprot.writeString(struct.messageId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMessage_argsTupleSchemeFactory implements SchemeFactory {
      public sendMessage_argsTupleScheme getScheme() {
        return new sendMessage_argsTupleScheme();
      }
    }

    private static class sendMessage_argsTupleScheme extends TupleScheme<sendMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionid()) {
          optionals.set(0);
        }
        if (struct.isSetMessage()) {
          optionals.set(1);
        }
        if (struct.isSetTaskid()) {
          optionals.set(2);
        }
        if (struct.isSetMessageId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSessionid()) {
          oprot.writeString(struct.sessionid);
        }
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
        if (struct.isSetTaskid()) {
          oprot.writeI32(struct.taskid);
        }
        if (struct.isSetMessageId()) {
          oprot.writeString(struct.messageId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.sessionid = iprot.readString();
          struct.setSessionidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.taskid = iprot.readI32();
          struct.setTaskidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.messageId = iprot.readString();
          struct.setMessageIdIsSet(true);
        }
      }
    }

  }

  public static class sendMessage_result implements org.apache.thrift.TBase<sendMessage_result, sendMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField AZE_FIELD_DESC = new org.apache.thrift.protocol.TField("aze", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FOE_FIELD_DESC = new org.apache.thrift.protocol.TField("foe", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMessage_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.fake.storm.generated.AuthorizationException aze; // required
    public org.apache.fake.storm.generated.FileOperationException foe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      AZE((short)1, "aze"),
      FOE((short)2, "foe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // AZE
            return AZE;
          case 2: // FOE
            return FOE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.AZE, new org.apache.thrift.meta_data.FieldMetaData("aze", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FOE, new org.apache.thrift.meta_data.FieldMetaData("foe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessage_result.class, metaDataMap);
    }

    public sendMessage_result() {
    }

    public sendMessage_result(
      boolean success,
      org.apache.fake.storm.generated.AuthorizationException aze,
      org.apache.fake.storm.generated.FileOperationException foe)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.aze = aze;
      this.foe = foe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessage_result(sendMessage_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetAze()) {
        this.aze = new org.apache.fake.storm.generated.AuthorizationException(other.aze);
      }
      if (other.isSetFoe()) {
        this.foe = new org.apache.fake.storm.generated.FileOperationException(other.foe);
      }
    }

    public sendMessage_result deepCopy() {
      return new sendMessage_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.aze = null;
      this.foe = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sendMessage_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.fake.storm.generated.AuthorizationException getAze() {
      return this.aze;
    }

    public sendMessage_result setAze(org.apache.fake.storm.generated.AuthorizationException aze) {
      this.aze = aze;
      return this;
    }

    public void unsetAze() {
      this.aze = null;
    }

    /** Returns true if field aze is set (has been assigned a value) and false otherwise */
    public boolean isSetAze() {
      return this.aze != null;
    }

    public void setAzeIsSet(boolean value) {
      if (!value) {
        this.aze = null;
      }
    }

    public org.apache.fake.storm.generated.FileOperationException getFoe() {
      return this.foe;
    }

    public sendMessage_result setFoe(org.apache.fake.storm.generated.FileOperationException foe) {
      this.foe = foe;
      return this;
    }

    public void unsetFoe() {
      this.foe = null;
    }

    /** Returns true if field foe is set (has been assigned a value) and false otherwise */
    public boolean isSetFoe() {
      return this.foe != null;
    }

    public void setFoeIsSet(boolean value) {
      if (!value) {
        this.foe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case AZE:
        if (value == null) {
          unsetAze();
        } else {
          setAze((org.apache.fake.storm.generated.AuthorizationException)value);
        }
        break;

      case FOE:
        if (value == null) {
          unsetFoe();
        } else {
          setFoe((org.apache.fake.storm.generated.FileOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case AZE:
        return getAze();

      case FOE:
        return getFoe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case AZE:
        return isSetAze();
      case FOE:
        return isSetFoe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessage_result)
        return this.equals((sendMessage_result)that);
      return false;
    }

    public boolean equals(sendMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_aze = true && this.isSetAze();
      boolean that_present_aze = true && that.isSetAze();
      if (this_present_aze || that_present_aze) {
        if (!(this_present_aze && that_present_aze))
          return false;
        if (!this.aze.equals(that.aze))
          return false;
      }

      boolean this_present_foe = true && this.isSetFoe();
      boolean that_present_foe = true && that.isSetFoe();
      if (this_present_foe || that_present_foe) {
        if (!(this_present_foe && that_present_foe))
          return false;
        if (!this.foe.equals(that.foe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_aze = true && (isSetAze());
      list.add(present_aze);
      if (present_aze)
        list.add(aze);

      boolean present_foe = true && (isSetFoe());
      list.add(present_foe);
      if (present_foe)
        list.add(foe);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAze()).compareTo(other.isSetAze());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAze()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aze, other.aze);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFoe()).compareTo(other.isSetFoe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFoe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foe, other.foe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMessage_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aze:");
      if (this.aze == null) {
        sb.append("null");
      } else {
        sb.append(this.aze);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("foe:");
      if (this.foe == null) {
        sb.append("null");
      } else {
        sb.append(this.foe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMessage_resultStandardSchemeFactory implements SchemeFactory {
      public sendMessage_resultStandardScheme getScheme() {
        return new sendMessage_resultStandardScheme();
      }
    }

    private static class sendMessage_resultStandardScheme extends StandardScheme<sendMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // AZE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.aze = new org.apache.fake.storm.generated.AuthorizationException();
                struct.aze.read(iprot);
                struct.setAzeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FOE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.foe = new org.apache.fake.storm.generated.FileOperationException();
                struct.foe.read(iprot);
                struct.setFoeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.aze != null) {
          oprot.writeFieldBegin(AZE_FIELD_DESC);
          struct.aze.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.foe != null) {
          oprot.writeFieldBegin(FOE_FIELD_DESC);
          struct.foe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMessage_resultTupleSchemeFactory implements SchemeFactory {
      public sendMessage_resultTupleScheme getScheme() {
        return new sendMessage_resultTupleScheme();
      }
    }

    private static class sendMessage_resultTupleScheme extends TupleScheme<sendMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAze()) {
          optionals.set(1);
        }
        if (struct.isSetFoe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetAze()) {
          struct.aze.write(oprot);
        }
        if (struct.isSetFoe()) {
          struct.foe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aze = new org.apache.fake.storm.generated.AuthorizationException();
          struct.aze.read(iprot);
          struct.setAzeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.foe = new org.apache.fake.storm.generated.FileOperationException();
          struct.foe.read(iprot);
          struct.setFoeIsSet(true);
        }
      }
    }

  }

}
